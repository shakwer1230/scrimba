v-if
    <h1 v-if="awesome">Vue is awesome!</h1>
    <template v-if="ok">
    <h1>Title</h1>
    <p>Paragraph 1</p>
    <p>Paragraph 2</p>
    </template>

v-else
    <div v-if="Math.random() > 0.5">
        Now you see me
    </div>
    <div v-else>
        Now you don't
    </div>

v-else-if
    <div v-if="type === 'A'">
        A
    </div>
    <div v-else-if="type === 'B'">
         B
    </div>
    <div v-else-if="type === 'C'">
        C
    </div>
    <div v-else>
        Not A/B/C
    </div>


用 key 管理可复用的元素
 <template v-if="loginType === 'username'">
            <label>Username</label>
            <input placeholder="Enter your username" >
        </template>
        <template v-else>
            <label>Email</label>
            <input placeholder="Enter your email address"  >
        </template>
        <p></p>
        <button v-on:click="toggle"> Toggle login type</button>

methods:{
        toggle:function(){
            debugger
            if(this.loginType==='username'){
                this.loginType='email'

            }else{
                this.loginType='username'
            }
        }
    }


v-show:
    不同的是带有 v-show 的元素始终会被渲染并保留在 DOM 中。v-show 只是简单地切换元素的 CSS 属性 display。注意，v-show 不支持 <template> 元素，也不支持 v-else。
    -if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。

    v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。

    相比之下，v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。

    一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。

v-for
   v-for 指令根据一组数组的选项列表进行渲染。v-for 指令需要使用 item in items 形式的特殊语法
   也可以用 of 替代 in 作为分隔符，因为它是最接近 JavaScript 迭代器的语法
   <div v-for="item of items"></div>

数组操作
  变异方法：
    push()
    pop()
    shift()
    unshift()
    splice()
    sort()
    reverse()
  修改数组某项值 两个方法
    var vm = new Vue({
        data: {
            items: ['a', 'b', 'c']
        }
    })
   Vue.set(vm.items,index,'newValue')
   vm.$set(vm.items, indexOfItem, newValue)
   vm.$set方法 是 Vue.set方法别名

   修改数组长度
    vm.items.splice(newLength)

对象操作
  可以使用 Vue.set(object, key, value) 方法向嵌套对象添加响应式属性
  var vm = new Vue({
    data: {
        userProfile: {
            name: 'Anika'
        }
    }
  })
  动态添加年龄属性
    Vue.set(vm.userProfile, 'age', 27)
  动态添加多个属性
    Object.assign(app.userProfile,{
        sex: 'm',
        country: 'china'
    })

过滤/排序
    filter(val){} 过滤函数

模板中使用$emit(方法名) 接收模板调用的时候传递的真实方法  
is="todo-item" 属性。这种做法在使用 DOM 模板时是十分必要的，因为在 <ul> 元素内只有 <li> 元素会被看作有效内容。这样做实现的效果与 <todo-item> 相同，但是可以避开一些潜在的浏览器解析错误
  代码 fortemplate
 